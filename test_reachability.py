import json
import yaml
from pathlib import Path
from netmiko import ConnectHandler


def load_topology(
    topology_file: str = "topology.yml",
    lab_directory_prefix: str = "clab-",
    topology_json_file: str = "topology-data.json",
) -> dict:
    """Attempts to load the Containerlab topology along with the topology data

    Args:
        topology_file:          File path of the YAML topology
        lab_directory_prefix:   Prefix to search based on the topology name, by default lab directory is 'clab-<name of topology>'
        topology_json_file:     Name of the JSON topology file auto-generated by Containerlabs
    """
    try:
        with Path(topology_file).open() as yaml_file:
            topology = yaml.safe_load(yaml_file)
    except FileNotFoundError:
        exit(f"Unable to find topology file called {topology_file}...")
    except Exception as err:
        exit(f"Unable to load YAML topology due to {err}")

    topology_name = topology["name"]
    lab_directory = Path(lab_directory_prefix + topology_name)
    if not lab_directory.exists():
        exit(f"Lab directory {lab_directory.name} does not exist")

    json_topology_file = lab_directory.joinpath(topology_json_file)
    if not json_topology_file.exists():
        exit(f"JSON Topology  file {json_topology_file.name} does not exist")

    with json_topology_file.open() as json_file:
        json_topology = json.load(json_file)

    return json_topology


def test_reachability(topology: dict = load_topology()):
    assert topology
    nodes = topology["nodes"]
    for node, node_data in nodes.items():
        print(f"Attempting to log into node: {node}")
        with ConnectHandler(
            **{
                "host": node_data["longname"],
                "username": "clab",
                "password": "clab@123",
                "device_type": "cisco_xr",
            }
        ) as ssh_session:
            version = ssh_session.send_command("show version", use_genie=True)
            assert version.get("operating_system") == "IOSXR"  # Validate IOSXR device
